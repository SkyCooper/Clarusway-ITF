# -*- coding: utf-8 -*-
"""workshop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AYBMTdHEgDJFbg54Ha5lWZdHxWhiiXcJ
"""

TYPE COLLETİON;
STR ('')
İNT(2 ,3 , ...)
FLOAT (3.14)
complex (a + bj)
BOOL (True, False)

STRİNG
# tırnak içinde yazılan her şey string dir.
# virgül sadece value ları ayırmak için kullanılır.
# "" '' ''' ''' farklı kullanımları var amaç burada hangi çeşit tırnakla başlarsak onunla bitireceğiz, 
# metin içinde ' ' kullanıldı ise string için " " kullanmalıyız.
# print bir fonksiyondur, ekrana yazdıklarımız bastırmak için kullanılır.
# immutable dır. yani değiştirilemezdir.
    # Pythonda int, float, bool, string, unicode, tuple immutable (değiştirilemez)
    # list, dict, set ise mutable (değiştirilebilir) 
# itetable'dır. yani elemanlarına ayrılabilir.
    # Lists, tuples, dictionaries, and sets are all iterable objects.
print( 1 + 1 )  #toplama, çıkarma, çarpma, bölme yapabilir.
print(8 * 10)
print(100 /10)  #float sonuç verir.
print(100//10)  #int sonuç verir.
print(3 ** 2)
print(100-90)
print(3**2 + 1)
print("1" + "1") # iki str(1) birleştirir.
print("1" + 1) #bir integer ile bir str birleştirilmez. tipleri aynı olmalıdır.

print("clarusway", 4, 3, 3.14, "ali", "veli")  
# value lar arasında virgül olacak.
print()  # DİKKAT 
print('first line')
print('me_group_alpha')
print("It's my pleasure")
print("new" "line")
print("new" "line" "end", 3)   #virgül ile ayırınca hata vermez
print("new" "line" "end" 3) #burada int virgülle ayrılmadığı için hata veriyor.

no = 1
cohort = 12
text = 'clarusway student'
a = '09 Mayıs 2022'
b = 3.14
c = '571'
print(text, cohort, no, a, b, c)

# PEP 8 kuralları;
* 79 karakter olarak belirlenmiştir.
* Variable lar anlamlı bir şekilde isimlendirilmelidir.
* Herkesin anlayabileceği bir netlikte yazılmalıdır.
* O ya da 0 kullanımda hata verebilir, L ve l kullanımda hata verebilir.
* normal - değil alt _ kullanılır.
* Büyük harf kullanmaması iyidir.
* boşluk bırakılmamalı.
* Özel karakterler kullanılmamalı.
* 
.......

# NUMERİC TYPE
# sonuç True olsa da int ile float olarak yazdırdığımızda farklı olduğunu görüyoruz.
10 == 10.0

float(0)

int(0)

# bir şeyi string olarak yazmanın yolu " " içine almaktır ya da str() fonksiyonu ile atama yapmaktır.
# TÜM VERİ TİPLERİ STR DÖNÜŞÜR AMA,  TÜM VERİ TİPLERİ İÇİN İNT VE FLOAT dönüşür diyemeyiz.
str(0)

# VARİABLE VALUE
my_age = 33  # my_age (variable), 33 (value)
color = "red"

x = "  Clarusway    "
print(len(x)) 
# boşluklarıda bir değer olarak kabul eder ve sayar.

len(111)    #iterable olmayan bir şeyin uzunluğu olmaz ve eleman sayısından bahsedilmez. integer bir veri elemanlarına ayrılmaz. 
# zaten 111 integer dır.
#iterable olanlar; string, colection (list, tuplel, dictionary, set) bunların eleman sayısı alınabilir.

# TYPE FONK.
a = 'clarusway'
b = 12
c = 3.14
d = 3.14j
print(type(a))
print(type(b))
print(type(c))
print(type(d))

# değer atamasında en son vereceği değer bizim str en son atadığımız değerdir.
str_one = 'upper'
str_one += 'case'
print(str_one)
str_one += 'letter'
print(str_one)
str_one += 'end'
print(str_one)

#verdiğimiz boşluklarıda bir değer olarak kabul eder.
a = "clarus"
a+= "    way"
print(a)

b = 'python'
b += 'lesson'
print(b)

# işlem sırası;
parantez içi
üslü sayılar
negatif sayı
çarpma bölme
toplama çıkarma

# Bazı sihirli ters slahslar;
'\n' bu komuttan sonra bir boşluk bırakır, tek tırnak kullanmak istediğimiz zamanda farklı bir kullanımıyla yardımımıza koşar.
'\t' bir tab içerden başlar.
'\b' 1 karakter geri alır.
end = "-" metin sonunda end i kullanarak boşluk ya da * ya da başka bir ayraç kullanabiliriz.Normalde bir alt satıra atar.
sep = '+' ayırıcı olarak istediğimiz karakteri sep ile yapabiliriz.

# \n kullanımı
print('C: \\november\number_ex.txt')
# \b kullanımı
print("we", '\bare', '\bunited')
#\t kullanımı
print("Clasrusway", '\tClarusway')
# end kullanımı
print("ayşe","ayşenur", "aslınur", "nazlı", end = '****')  #bu kısma dikkat edelim, end in fonk. değiştirdiğim için bir alt satıra indirmedi bir sonrakini 
# yanına aldı.
print("humeyra" + 'mentor')
#\s kullanımı
print('it\'s pencil')
# sep kullanımı
print("rabia","gamze", "rumeysa", "neşe", 'bahar', 'kübra', 'asuman', sep = '**')
print(r" \n merhaba")  # "r" veya "R" harfi ile önek eklendiğinde bir dize değişmezi bir ham dize haline gelir ve \n gibi kaçış dizeleri dönüştürülmez.

# BOOLEAN
True ya da False verir, 3 tane mantık ifadesi var; and, or, not
or her zaman true yı arar, çok pozitiftir hep olumlu düşünür :)
and illa ki bir sorun vardır der ve hep false arar negatif düşünür :) 
not mevcudu tersine çevirir.
SIRALAMA;
None
0, 0.0, 0j 
boş dizeler '', [], {}
bunların dışında kalanlar bir değer olarak değerlendirilir. ve TRUE kabul edilir.

2 and 3         # 3
3 or 0          # 3
None or 3       # 3
None and 3      # Boş (çünkü None aldı, oda zaten hiçbir şey demek)
[] or None      #sıralama da None olduğu için onu aldı.
[] and None     #Boş string None göre işlem sırasında aşağıda olduğu için yanlış olarak [] aldı.
0 or None       #aynı mantık işlem sırası
0 and None      #aynı mantık işlem sırası

[] or None

[] and None

0 or None

0 and None

İNDEXİNG & SLİCİNG STRİNGS
Dizilerin numaralandırılması soldan 0 ile sağdan ise -1 ile başlar.
string[start:stop:step]

city = 'ŞekerPortakalı'
print(city[1:])
print(city[:6])
print(city[::2])
print(city[1::2])
print(city[-3:])
print(city[::-1])
print(city[-2:-6])  # atlama +1 olduğu için boş çıktı verir.Ters yönde hareket edemez.
print(city[-2:-6:-1])

# Commented out IPython magic to ensure Python compatibility.
STRİNG FORMATTİNG WİTH ARİTMETİC Syntax
Aritmetik söz dizimi (+, *, =)
# %operatör
string.format
f-string

#aritmetik söz dizimi
sonuç = str((5+6) ** 2) + '121'
print(sonuç)

#%operatör
konu = 'asıl konu %d %s and %.2f ' % (4, "umut", 5)
print(konu)

#aritmetik işlem yapılabilir
print(3 *'olmaz!')

print (* "I am angry")  # burada boşluk karakterini de karakter olarak kabul ettiği için ondan sonra da boşluk veriyor.

# %operatör
x = 'Merhabalar'
print('%.5s' % x)

# str.format metodu:
print('{state} is the most {adjective} state of the {country}'.format(state='California', country= 'USA', adjective='crowded')) 
#anahtar kelimeleri sırayla yazmamıza gerek yok, çünkü atama yaptık.

print("{6} {0} {5} {3} {4} {1} {2}".format('have', 6, 'months', 'a job', 'in', 'found', 'I will')) #index sıralaması yaptırıyoruz

fruit = 'orange'
vegetable = 'Tomato'
amount = 4
print('The amount of {} we bought is {} pounds'.format(fruit, amount))

print('{0} is the most {adjective} state of the {country}'.format('California', country= 'USA', adjective='crowded')) 
#ilk kısımda string i 0 olarak yazınca tanımsız olduğu için California yı aldı

# f-string metodu
name = "asuman"
job = "engineer"
domain = "food"
message = (
    f"Hi {name}."
    f"You are one of the {job}"
    f" in the {domain} section."
)                                     #bu kısımda message sonrası parantez kullandık.
print(message)

name = "asuman"
job = "engineer"
domain = "food"
message = f"Hi {name}. " \
f"You are one of th {job} " \
f"in the {domain} section."
print(message)
# bu kısımda parantez kullanmadık \ kullanarak biçimlendirme yaptık.

city = "TÜRKİYE"
text1 = f"{city.capitalize()}"
print("I live in " + text1)       #1. yol
text2 = f"I live in {city.capitalize()}"
print(text2)                      #bu kod 2 şekilde yazılabilir.

#dize arama, değiştirme ve farklı fonksiyonlar;

text = 'www.clarusway.com'
print(text.endswith('.com'))  # sonda arar
print(text.startswith('http:')) # başta  arar

email = "clarusway@clarusway.com is my e-mail address"
print(email.startswith("@",9))       #9.karakter @ dır, sonuç true
print(email.endswith("-", 10, 32))   #10 ile 32 arasında - var, sonuç true

sentence = "Her şey güzel olacak, biraz sabır, biraz daha gayret..."
print(sentence.upper())
print(sentence.lower())
print(sentence.swapcase())
print(sentence ) # kaynak olan metin değişmedi aynı kaldı

new_sentence = 'Hala çok işimiz var...'
print(str.title(sentence))
print(str.capitalize(sentence))
print(sentence.replace ('a', '+'))
print("number:", sentence.count("a"))
print(sentence)                       #str ler değişmez mutable dır.
print(new_sentence)                   #str ler değişmze mutable dır.

# Dize Düzeltme
space_string = "           listen first          "
new = "information"

print(space_string.strip())     #her taraftan siler
print(space_string.lstrip())    #sol
print(space_string.rstrip())    #sağ
print(new.rstrip("on"))
print(new.lstrip("in"))
print(new.strip("i"))

word = 'clarusway'
n = 3
front = (word[ :n])
back = (word[(n+1) :])
print(front+back)

text = "Clarusway, Clarusway, Clarusway"
print(text +", \n\t" + text +", \n\t\t" + text) 
#burada \n satırı aşağıya indirdi \t ise bir kez tab tuşuna basma fonk. gerçekleştirmiş oldu.

# COLLETİON TYPE
# LİST; iterable dır, elemanlarına ayrılır, mutabledır yerinde değişir.
# boş list iki şekilde oluşturulur;
list()
[]
string_1 = "I quit smoking"
new_list_1 = list(string_1)  #çoklu eleman listesi oluşturduk.
new_list_2 = [string_1] # tek elemanlı liste 
print(new_list_1) 
print(new_list_2)
#list()işlevini kullanarak boşluklar dahil olmak üzere string_1 in tüm karakterlerini new_list_1 taşıdık.
#ayrıca aşağıdaki listeye dikkatlice bakılınca aynı değerden birden fazla olduğunu görüyoruz, i harfi gibi

# Değerleri sırasıyla 3,1,2 olan listeyi 1,1,2 olarak değiştiriniz.
liste=[3,1,2]
 
liste[0]=1
liste[1]=1
liste[2]=2
 
print(liste)

mixed_list = [11, "grup_alfa", False, 3.14, None, [1,2,3,]] #burada da görüleceği tek bir veri türü yok, int, str, boolean,...
print(mixed_list)

#list elemanlarına ayırırken boşluklarıda bir karakter olarak kabul eder.
alfa = "11, 'grup_alfa', False"  #burada yazılanın kesinlikle string olması lazım ve tırnak içinde olması lazım, köşeli parantezle yazılmamalı.
new_alfa= list(alfa)
print(new_alfa)
new_alfa_1 = [alfa]
print(new_alfa_1)

# LİSTE İNDEXLEME
colors = ["red", "purple", "blue", "yellow", "green"]  #liste indexleme metodunun kullanımı
print(colors[2])  #ıf we start at zero, the second element will be blue. sıfırdan başlarkan ikinci element mavi olur.

# list indexleme

fruits = ['apple', 'banana', 'watermelon', 'orange', 'mango', 'avocado']
fruit_list = []
fruit_list.insert(0, fruits)
print(fruit_list)

print(fruit_list[0][2][7])

# hafta_ici isimli bir liste oluşturarak haftanın günlerini ekleyiniz.
# Daha sonra sırasıyla cuma ve cumartesi günlerinin listede olup olmadığını kontrol ediniz.

hafta_ici=["pazartesi","salı","çarşamba","perşembe","cuma"]
print("cuma" in hafta_ici)
print("cumartesi" in hafta_ici)

city = ['New York', 'London', 'Istanbul', 'Seoul', 'Sydney']
city_list = [] #burada tamamının bir liste olduğunu belirttik,
city_list.append(city) #we have created lis a nested list. listeyi iç içe bir liste olarak oluşturduk.
print(city_list)
#city_list liste olan yalnızca bir öğe içerir. çıktıya dikkat et, çift köşeli parantez var yani ikici parantez listeyi tek bir öğe haline getirdi.

print(city_list)
print(city_list[0]) #city_list in ilk yani 0. elemanı nedir dediğimize çıkan sonuca dikkat.
print(city_list[0][2])  #burada ise 0 öğesinin içindeki 2.elemana erişmek istedik. (sonuç İstanbul)
#burada city_list[0] bir liste tipi veridir. (a liste type data)
#fakat city_list[0][2] bu ise bir dize tipe veridir. (a string type data)
print(city_list[0][2][7])

#liste dilimleme
numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17]
print(numbers[2:5])  #dilimleme de köşeli paranteze dikkat et. start index=2 , stop index=5 (5 dahil değil)
#yani listenin 2.3. ve 4. öğelerini almış olduk.

#sequence[start:stop:step]
count = list(range(11))  #burada 1 den 10 a kadar olan bir sayı listesi oluşturduk, içinden çift olanları seçelim.
print(count)
print(count[0:11:2]) #0 dan başla 11 e kadar git (11 dahil değil) 2 şer adım atla

#KULLANICIDAN İNPUT ALARAK VİZE FİNAL HESAPLAMA
vize = input('Vize Notunuz : ')
final = input('Final Notunuz : ')
ortalama=(float(vize)*0.3)+(float(final)*0.7)
print("Ortalama :{0} ".format(ortalama))

#EDWİN HOCANIN SORDUĞU ÜÇGENİN AÇILARI TOPLAMININ FARKLI ÇÖZÜMLERİ
a = int(input("Açı1 : "))
b = int(input("Açı2 : "))
c = int(input("Açı3 : "))
Üçgen = ((a+b>=c) and (b+c>=a) and (a+c>=b) and (180==a+b+c) and (a>0 and b>0 and c>0))
print("Üçgen mi? :", bool(Üçgen))

# Verilen açılarla pozitif alan üçgeninin mümkün olup olmadığını kontrol eden bir program yazın.)
a = float(input("Açı-1:"))
b = int(input("Açı-2:"))
c = int(input("Açı-3:"))
if a!=0 and b!=0 and c!=0 and (a + b + c == 180) and (a + b > c or a + b == c) and (a + c > b or a + c == b) and (b + c > a or b + c == a):
  print("Doğru")
  if a==b==c and (a+b+c== 180):
    print("eşkenar üçgen")
  elif (a == b and a != c) or (a == c and a != b) or (b == c and b != a):
    print("İkizkenar Üçgen....")
  else:
    print("çeşitkenar üçgen")
else:
  print("Üçgen belirtmiyor")

# Verilen açılarla pozitif alan üçgeninin mümkün olup olmadığını kontrol eden bir program yazın.)
a = float(input("Type 1st angle of triangle:"))
b = float(input("Type 2nd angle of triangle:"))
c = float(input("Type 3rd angle of triangle:"))
print("Is it a triangle? : {}".format(a!=0 and b!=0 and c!=0 and (a + b + c == 180) and (a + b > c or a + b == c) and (a + c > b or a + c == b) and (b + c > a or b + c == a)))

# Verilen açılarla pozitif alan üçgeninin mümkün olup olmadığını kontrol eden bir program yazın.)
açı1 = int(input("birinci açıyı giriniz : "))
açı2 = int(input("ikinci açıyı giriniz  : "))
açı3 = int(input("birinci açıyı giriniz : "))
# Herhangi iki açının toplamı üçüncü açıdan büyük veya ona eşit olmalıdır
# Üç açının toplamı 180 olmalıdır
# Hiçbir açı sıfır olmamalıdır
üçgen = (((açı1 + açı2) >= açı3 and (açı2 + açı3) >= açı1 and (açı1 + açı3) >= açı2) and (180 == açı1 + açı2 + açı3) and (açı1 > 0 and açı2 > 0 and açı3 > 0))
print("Üçgen için uygun mudur? :", (üçgen))

# önce integer 1, 2 ve 3 'ten oluşan bir liste tanımlayın. 
# Sonra bu listenin son iki elemanı toplayıp listenin sonuna ekleyen ve 
# bunu 3 defa yapıp her defasında ekrana çıktı alan kod yazınız. (Döngü kullanmayınız.) 
liste = [*range(1,4)]

liste.append(liste[-1] + liste[-2])
print(liste)

liste.append(liste[-1] + liste[-2])
print(liste)

liste.append(liste[-1] + liste[-2])
print(liste)

# Kullanıcıdan bir dik üçgenin dik olan iki kenarını(a,b) alın ve hipotenüs uzunluğunu bulmaya çalışın.
# Hipotenüs Formülü: a^2 + b^2 = c^2
a= int(input("kenar_uzunluğu_1:"))
b= int(input("kenar_uzunluğu_2:"))
c=((a**2+b**2)**(0.5))  # c=hipotenüs
print(c)

y1 = input('1. Yazılı : ')
y2 = input('2. Yazılı : ')
y3 = input('3. Yazılı : ')
ortalama=(float(y1)+float(y2)+float(y3))/3
print("Ortalama :{0} ".format(ortalama))

kisa=input('Kısa Kenar : ')
uzun=input('Uzun Kenar : ')
alan=int(kisa)*int(uzun)
cevre=2*(int(kisa)+int(uzun))
print("Alan : {0}".format(alan))
print("Çevre : {0}".format(cevre))

#MAAŞ HESABI
yeniMaas=0
maas=input("Maaşı Gir : ")
zam=input("Zam Oranı(%) : ")
yeniMaas=int(maas)+(int(maas)*int(zam)/100)
print("Zamlı Maaş :",yeniMaas)

#dikdörtgen alanı hesaplama
gen = int(input("Genişlik :"))
yuk = int(input("Yükseklik : "))
alan = float(gen) * float(yuk)
print("Alan :", alan)

