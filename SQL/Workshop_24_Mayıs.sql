--WRITE A QUERY THAT RETURNS TRACK NAME AND ITS COMPOSER FROM TRACKS TABLE
SELECT name, Composer
FROM tracks

--WRITE A QUERY THAT RETURNS ALL COLUMNS FROM TRACKS TABLE
SELECT *
FROM tracks

--WRITE A QUERY THAT RETURNS THE NAME OF COMPOSERS OF EACH TRACK
SELECT name, DISTINCT(Composer)
FROM tracks

--WRITE A QUERY THAT RETURNS UNIQUE ALBUMID, MEDIATYPEID FROM TRACKS TABLE
SELECT DISTINCT AlbumId, MediaTypeId
FROM tracks

--WRITE A QUERY THAT RETURNS TRACK NAME AND TRACKID OF ‘Jorge Ben’
SELECT name, TrackId
FROM tracks
WHERE Composer = 'Jorge Ben'

--WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH TOTAL AMOUNT IS GREATER THAN $25
SELECT *
FROM invoices
WHERE total > 25

--WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH TOTAL AMOUNT IS LESS THAN $15. JUST RETURN 5 ROWS
SELECT *
FROM invoices
WHERE total < 15
LIMIT 5

--WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH TOTAL AMOUNT IS GREATER THAN $10. 
--THEN SORT THE TOTAL AMOUNTS IN DESCENDING ORDER, LASTLY DISPLAY TOP 2 ROWS
SELECT *
FROM invoices
WHERE total >10
ORDER By total DESC
LIMIT 2

--WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH BILLING COUNTRY IS NOT CANADA.
--THEN SORT THE TOTAL AMOUNTS IN ASCENDING ORDER, LASTLY DISPLAY TOP 10 ROWS
SELECT *
FROM invoices
WHERE BillingCountry <> 'Canada'
ORDER By total


SELECT *
FROM invoices
WHERE NOT BillingCountry = "Canada"
ORDER BY total ASC



--WRITE A QUERY THAT RETURNS INVOICEID, CUSTOMERID AND TOTAL DOLLAR AMOUNT FOR EACH INVOICE. 
--THEN SORT THEM FIRST BY CUSTOMERID IN ASCENDING, THEN TOTAL DOLLAR AMOUNT IN DESCENDING ORDER.
SELECT InvoiceId, CustomerId, total
FROM invoices
ORDER BY CustomerId, total DESC

-- WRITE A QUERY THAT RETURNS ALL TRACK NAMES THAT START WITH ‘B’ AND END WITH ‘S’
SELECT name
FROM tracks
WHERE name
like 'B%S'

--WRITE A QUERY THAT RETURNS THE NEWEST DATE AMONG THE INVOICE DATES BETWEEN 2008 AND 2011
SELECT InvoiceDate
FROM invoices
WHERE InvoiceDate BETWEEN '2008-01-01' AND '2011-12-31'
ORDER BY InvoiceDate DESC
LIMIT 1

--WRITE A QUERY THAT RETURNS THE FIRST AND LAST NAME OF THE CUSTOMERS WHO HAVE ORDERS FROM NORWAY AND BELGIUM
SELECT FirstName, LastName
FROM customers
WHERE Country in ('Norway', 'Belgium')

--WRITE A QUERY THAT RETURNS THE TRACK NAMES OF ‘ZAPPA’
SELECT name, Composer
FROM tracks
WHERE Composer = 'Frank Zappa'

--HOW MANY TRACKS AND INVOICES ARE THERE IN THE DIGITAL MUSIC STORE, DISPLAY SEPERATELY
SELECT count(InvoiceId), count(TrackId)
FROM invoice_items
WHERE InvoiceId AND TrackId IS NOT NULL

SELECT count(DISTINCT InvoiceId), count(DISTINCT TrackId)
FROM invoice_items
WHERE InvoiceId AND TrackId IS NOT NULL

SELECT count (DISTINCT TrackId), count (DISTINCT InvoiceId)-- 2 tabloyu aynı anda seçme yapılır.
FROM tracks, invoices

SELECT COUNT(*) ---tek tek bakma
FROM tracks

SELECT COUNT(*)--tek tek bakma
FROM invoices

--HOW MANY COMPOSERS ARE THERE IN THE DIGITAL MUSIC STORE
SELECT count (DISTINCT Composer)
FROM tracks
-- WHERE Composer IS NOT NULL --count NULL olanı saymadığı için bu satıra ilave gerek yok.

--HOW MANY TRACKS DOES EACH ALBUM HAVE, DISPLAY ALBUMID AND NUMBER OF TRACKS SORTED FROM HIGHEST TO LOWEST
SELECT AlbumId, count(TrackId)
FROM tracks
GROUP By AlbumId
ORDER By count(TrackId) DESC

--WRITE A QUERY THAT RETURNS TRACK NAME HAVING THE MINIMUM AND MAXIMUM DURATION, DISPLAY SEPERATELY

SELECT name, max(Milliseconds)
FROM tracks
UNION
SELECT name, min(Milliseconds)
FROM tracks

---- aynı tablodan, aynı sütünlardan farklı değer alınması ile;
SELECT  a.name , min(a.Milliseconds), b.name ,max(b.milliseconds)
FROM tracks a, tracks b

---cross join ile yapılışı
SELECT * FROM (SELECT name, min(Milliseconds) FROM tracks)
CROSS JOIN (SELECT name, max(milliseconds) FROM tracks);

--WRITE A QUERY THAT RETURNS THE TRACKS HAVING DURATION LESS THAN THE AVERAGE DURATION
SELECT avg(Milliseconds)--393599.212103911
FROM tracks

SELECT name, Milliseconds
FROM tracks
WHERE Milliseconds < 393599.212103911

--WRITE A QUERY THAT RETURNS THE TOTAL NUMBER OF EACH COMPOSER’s TRACK.
SELECT Composer, COUNT(TrackId)
FROM tracks
GROUP By Composer

--WRITE A QUERY THAT RETURNS THE GENRE OF EACH TRACK.
SELECT genres.GenreId, tracks.name
FROM genres
INNER JOIN tracks ON genres.GenreId = tracks.GenreId


--WRITE A QUERY THAT RETURNS THE ARTIST’s ALBUM INFO.
SELECT *
FROM artists
JOIN albums ON artists.ArtistId = albums.ArtistId

--WRITE A QUERY THAT RETURNS THE MINIMUM DURATION OF THE TRACK IN EACH ALBUM. 
--DISPLAY ALBUMID, ALBUM TITLE AND DURATION OF THE TRACK. THEN SORT THEM FROM HIGHEST TO LOWEST

SELECT albums.AlbumId, albums.Title, MIN(tracks.Milliseconds)
FROM tracks
LEFT JOIN albums ON tracks.AlbumId = albums.AlbumId
GROUP By albums.AlbumId
ORDER BY tracks.Milliseconds DESC


--WRITE A QUERY THAT RETURNS ALBUMS WHOSE TOTAL DURATION IS HIGHER THAN 60 MIN. 
--DISPLAY ALBUM TITLE AND THEIR DURATIONS. THEN SORT THE RESULT FROM HIGHEST TO LOWEST

SELECT albums.Title, SUM(Milliseconds)
FROM tracks
INNER JOIN albums ON tracks.AlbumId = albums.AlbumId
GROUP BY albums.AlbumId
HAVING SUM(Milliseconds) > 60*60*1000
ORDER BY SUM(Milliseconds) DESC;


SELECT A.AlbumId, A.total_duration, albums.Title
FROM(SELECT AlbumId, SUM (Milliseconds) AS TOTAL_DURATION
	 FROM tracks
	 GROUP BY AlbumId) A INNER JOIN albums ON A.AlbumId = albums.AlbumId
WHERE 	TOTAL_DURATION > 60*60*1000
ORDER BY TOTAL_DURATION



--WRITE A QUERY THAT RETURNS TRACKID, TRACK NAME AND ALBUMID INFO OF THE ALBUM WHOSE TITLE ARE 
--‘Prenda Minha’, 'Heart of the Night' AND 'Out Of Exile'.

SELECT tracks.TrackId, tracks.Name,albums.AlbumId, albums.Title
FROM albums
JOIN tracks ON albums.AlbumId = tracks.AlbumId
WHERE albums.Title IN ('Prenda Minha', 'Heart of the Night', 'Out Of Exile')


